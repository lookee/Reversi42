-------------------------------------------------------------

Reversi42
release: 0.1.3

released: 2011-03-07
updated: 2025-10-14 (Python 3 conversion)

Copyright (C) 2011 Luca Amore <luca.amore at gmail.com>

https://www.lucaamore.com

-------------------------------------------------------------

DESCRIPTION

Reversi42 is a complete implementation of the classic Reversi (Othello) board game 
written in Python. The game features:

- Full GUI implementation using Pygame
- AI opponent with configurable difficulty levels
- Multiple player types (Human, AI, Random)
- Complete game logic with move validation
- Alpha-beta pruning AI strategy
- ASCII and graphical board representation
- Game history tracking

GAME FEATURES

- 8x8 standard Reversi board
- Real-time move validation
- Visual indication of available moves
- Turn-based gameplay with automatic switching
- Win/loss detection and scoring
- Undo functionality
- Configurable AI depth (difficulty levels)

PLAYER TYPES

The game features a metadata-driven player system. New player types can be
added easily by defining their metadata - the menu auto-generates options.

Available Players:
1. HumanPlayer: Interactive player using mouse clicks
2. AIPlayer: Intelligent AI using alpha-beta pruning (configurable difficulty 1-10)
3. HeuristicPlayer: Fast AI using simple heuristics without deep search
4. GreedyPlayer: Always chooses the move that captures the most pieces immediately
5. Monkey: Random move selection for testing

Disabled (development):
- NetworkPlayer: Play against remote opponents (not yet implemented)

See ADDING_PLAYERS.md for instructions on adding custom player types.

AI STRATEGY

The AI uses advanced techniques including:
- Alpha-beta pruning for efficient search
- Modular position evaluation system (pluggable evaluators)
- Move ordering with priority matrix
- Depth-limited search with configurable levels
- Transposition tables for position caching

EVALUATORS

The game features a modular evaluation system with multiple strategies:

1. StandardEvaluator: Original evaluation with mobility and corner control
2. SimpleEvaluator: Basic piece count for testing
3. AdvancedEvaluator: Weighted positions with dynamic game phase evaluation
4. GreedyEvaluator: Maximizes immediate piece count (short-sighted strategy)

Each evaluator can be combined with any AI engine, allowing for easy
experimentation and development of custom evaluation strategies

REQUIREMENTS

- Python 3.6 or higher
- Pygame library for GUI

Install Pygame:
```bash
pip install pygame
```

INSTALLATION

1. Clone or download the repository
2. Install Pygame if not already installed
3. Run the game using one of the methods below

RUNNING THE GAME

Method 1 - Using the main entry point:
```bash
python3 reversi42
```

Method 2 - Using the module entry point:
```bash
python3 src/reversi42.py
```

Method 3 - As a module:
```bash
python3 -m src.reversi42
```

TOURNAMENT SYSTEM

Run automated AI vs AI tournaments with comprehensive statistics:
```bash
cd tournament
python3 tournament.py
```

Features:
- Round-robin format (all vs all)
- Detailed statistical analysis
- Timing for every move
- Comprehensive reports
- Multiple AI types and difficulty levels

See tournament/README.md for complete documentation.

GAME CONTROLS

- Mouse: Click on available moves to place pieces
- ESC or Q: Quit the game
- The game automatically handles turn switching

PROJECT STRUCTURE

```
Reversi42/
├── src/
│   ├── Reversi/
│   │   ├── Game.py              # Core game logic
│   │   └── __init__.py
│   ├── Board/
│   │   ├── BoardModel.py        # Board data model
│   │   ├── BoardView.py         # Pygame GUI rendering
│   │   ├── BoardControl.py      # Input handling
│   │   └── __init__.py
│   ├── AI/
│   │   ├── GameEngine.py        # Base class for AI engines
│   │   ├── MinimaxEngine.py     # Minimax with alpha-beta pruning
│   │   ├── RandomEngine.py      # Random move selection
│   │   ├── HeuristicEngine.py   # Heuristic-based engine
│   │   ├── Evaluator.py         # Base class for evaluators
│   │   ├── StandardEvaluator.py # Standard evaluation function
│   │   ├── SimpleEvaluator.py   # Simple piece count evaluator
│   │   ├── AdvancedEvaluator.py # Advanced weighted evaluator
│   │   ├── GreedyEvaluator.py   # Greedy piece count evaluator
│   │   └── __init__.py
│   ├── Players/
│   │   ├── Player.py            # Base player class (with metadata system)
│   │   ├── HumanPlayer.py       # Human player implementation
│   │   ├── AIPlayer.py          # AI player wrapper
│   │   ├── HeuristicPlayer.py   # Heuristic player (fast, simple heuristics)
│   │   ├── GreedyPlayer.py      # Greedy player (maximizes immediate captures)
│   │   ├── Monkey.py            # Random player
│   │   ├── NetworkPlayer.py     # Network player (disabled, example)
│   │   ├── CustomPlayerExample.py # Example of custom player with parameters
│   │   ├── PlayerFactory.py     # Factory for creating players
│   │   └── __init__.py
│   ├── examples/
│   │   ├── evaluator_comparison.py  # Demo of different evaluators
│   │   ├── greedy_player_demo.py    # Demo of greedy strategy
│   │   ├── heuristic_player_demo.py # Demo of heuristic strategy
│   │   └── modular_players_example.py  # Demo of player modularity
│   ├── Menu.py              # Menu system
│   ├── GameOver.py          # Game over screen
│   ├── PauseMenu.py         # Pause menu
│   └── reversi42.py         # Main entry point
├── tournament/
│   ├── tournament.py        # Tournament system
│   ├── quick_tournament.py  # Quick tournament example
│   ├── README.md            # Tournament documentation
│   ├── TOURNAMENT_README.md # Detailed tournament guide
│   ├── TOURNAMENT_USAGE.txt # Quick usage guide
│   └── reports/             # Tournament reports directory
│       ├── README.md
│       └── tournament_report_*.txt (auto-generated)
├── reversi42                # Executable entry point
├── README                   # This file
├── ADDING_PLAYERS.md        # Guide for adding custom players
└── COPYING                  # License information
```



BASED ON

python-pygame - SDL bindings for games development in Python

-------------------------------------------------------------
LICENSE

Reversi42 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Reversi42 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Reversi42.  If not, see <http://www.gnu.org/licenses/>.

Luca Amore
luca.amore at gmail.com
http://www.lucaamore.com

-------------------------------------------------------------
RESOURCES

For more information about Reversi, visit:
http://en.wikipedia.org/wiki/Reversi

Official Othello rules and strategies:
http://www.fngo.it

-------------------------------------------------------------

ACKNOWLEDGMENTS

Thanks to: 
Donato Barnaba  
Federazione Italiana Gioco Othello (FNGO)
http://www.fngo.it
for his great support

Thanks to:
PointyStone3 project (https://github.com/jonkr2/PointyStone3)
for the opening book data used in this implementation

-------------------------------------------------------------

Have fun playing Reversi42!
